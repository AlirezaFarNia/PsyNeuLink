--------
BIDS Model Description Format (BIDS-MDF) 
--------

Introduction
------------
The purpose of the BIDS-MSF is to provide a standard, JSON-based format for describing computatonal models of
brain and/or mental function.  The goal is to provide a common exchange format that allows models created in one
environment that supports the standard to be expressed in a form -- and in sufficient detail -- that it can be
imported into another modeling environment that supports the standard, and then executed in that environment with
identical results,  and/or integrated with other models in that environment. 
    
The format assumes that models can be expressed as graphs, in which each node is a computational component, and edges
specify connections between them that (at least partially) determine the flow of computation.  In this respect,
they are similar to more generic forms of computational graphs.  However the standard supports the expression of
more specific elements within nodes and edges that are central to models of brain function (e.g., the inclusion of
"ports" in nodes that are dedicdated to processing the input and/or output of a node; and the "weight" and/or "function" 
of an edge that allows it to do more than simply relay information unmodified from one node to another.  Finally, the
standard allows elements that are specific to a particular modeling environment to be expressed in a circumscribed
form, so that the format can be used to "serialize" models from that environment, and makes them accessible to other
environments that specifically support those constructs from the origin environment.  This latter capability provides
a way not only for extending the standard to accomodate the specific needs of individual environments, but also as a
path toward extending the standard:  recurring extensions that serve similar purposes help identify targets for the
definition of new components of the core standard itself. 
            

Overall structure
-----------------

XXX REWORD BY DESIGNATING 5 PRIMARY TYPES OF OBJECT:  **graph**, **node**, **edge**, **port** and **function**

The BIDS-MDF is a hierarchically orgainzed format using JSON-compliant syntax, that can be used to describe one or model
models in a single text file.  The outermost level of the specificaton is a dictionary with a single entry named
``graphs``, the value of which is a ``list`` of  **graph** objects.  Each **graph** object is a dictionary that
defines a single model.  Each **graph** dictionary must have at least two entries, named **nodes** and **edges**.
It can also have additional entries (see below), some of which are generic (i.e., that can be used by any object
in the BIDS-MDF format -- see ``Entries common to all objects`` below).  Each entry in the **node** and **edge**
dictionaries must be another dictionary that contains object-specifific entries.  Thus, the overall scheme of a BIDS-MDF
specification looks like this:

    {
        "graphs": [
            {
                "name": {                                   # Optional
                    "Example Model"
                }
                "nodes": {                                  # Required
                    ... dictionaries for node objects
                }
                "edges": {                                  # Required
                    ... dictionaries for edge objects
                }
             }
            {
                "name": {
                    "Another Model"
                }
                "nodes": {
                    ... dictionaries for node objects
                }
                "edges": {
                    ... dictionaries for edge objects
                }
             }
         ]
     }

A **node** can contain an entry for another graph, that can be used to describe hierarchically-structured
models.  Where a modeling environment requires specification of objects or other information
not (yet) supported by the standard, environment-specific entries can be included using a name for the environment as
the entry's key.  In the examples below, PsyNeuLink (PNL) is used to demonstrate such environment-specific entries.

Entries common to all objects
-----------------------------

The following entries can be used in any BIDS-MDF object (using the strings shown below as their keys):

* ``name`` : a label for the object

* ``type`` : a dictionary used to describe the type of object specified by the entry.  The ``generic`` entry
  contains types supported by the standard (e.g., certain common types of functions;  see XXX);  in addition, the
  type can include environment-specific entries.  For example, the following specifies a graph that has two **nodes**,
  one of which is a nested **graph**, as specified by its ``type`` entry:

      "graphs": [
          {
              "nodes": {
                  "Processing Unit": {
                      ... node specifications
                  }
                  "Nested Graph": {
                      "type": {
                          "generic": "graph"
                          "PNL": "Composition"
                      }
                  }
              }

  Here, the ``generic`` entry of ``type`` is used to specify that it is a graph (recognized by the BIDS-MSF standard),
  while the ``PNL`` entry is used to specify the PNL-specific designation of a graph ("Composition").


XXX ??IS THERE ANY REASON TO DISTINGUISH THESE, OR SHOULD COMBINE THESE TO MAKE IT SIMPLER:
* ``parameters`` (non-**function**s) / ``args`` (**function**s) : this allows the specification of variables associated
  with an object being specified.  For all objects other than **functions**, these are called ``parameters``, and for
  **functions** they are called ``args`` (see XXX for discussion of **functions**).  In either case, value of the entry
  is a dictionary that contains name-value pairs.  For example, an entry for a node that implements a processing unit
  could have a ``parameter`` entry that specifies it **input_format** and the value of its **initializer** parameter:

      "nodes": {
          "Processing Unit": {
              "parameters": {
                    "input_format": "SCALAR",
                    "initializer": [[0]]
               }
          }
       }

  It could also have a ``function`` entry that specifies the function it uses to generate its output;  that ``function``
  entry could include, in addition to the specification of its type, an ``args`` entry that specifies the arguments to
  the function and their values:

    "nodes": {
        "Processing Unit": {
          "function": {
                "type": "Linear"
                "args": {
                    "bounds": null,
                    "intercept": 0.0,
                    "slope": 1.0
                }
            }
        }
    }

    The ``parameters`` entry of a node can also include a subdictionary of environment-specific parameter-value
    pairs, such as the following:

      "parameters": {
            "input_format": "SCALAR",
            "initializer": [[0]]
            "PNL": {                        # This is a subdictionary of PNL-specific parameters and their values
                "execution_count": 0,
                "has_initializers": false,
            }
        }

Object types and object-specific entries
----------------------------------------

**Nodes**, **edges**, and **ports** each have:

* ``functions`` : a list of **function** JSON objects.


    "functions": [
        {
            "args": {
                "intercept": {
                    "source": "A.input_ports.intercept",
                    "type": "float",
                    "value": 2.0
                },
                "slope": {
                    "source": "A.input_ports.slope",
                    "type": "float",
                    "value": 5.0
                }
            },
            "name": "Linear Function-1",
            "type": {
                "generic": "Linear"
            }
        }
    ]

Non-**graph** **Nodes** have:

* ``input_ports`` : a list of input and parameter *port* JSON objects

* ``output_ports`` : a list of output *port* JSON objects

**Edges** have:

* ``sender`` : the name of the *node* it projects from

* ``sender_port`` : the name of the port on the ``sender`` to which it connects

* ``receiver`` : the name of the *node* it projects to

* ``receiver_port`` : the name of the port on the ``receiver`` to which it connects

**Ports** have:

* ``dtype`` : the type of accepted input/output for the Port. This corresponds to [numpy.dtype](https://docs.scipy.org/doc/numpy/reference/generated/numpy.dtype.html>)

* ``shape`` : the shape of the accepted input/output. This corresponds \
to numpy ndarray shapes. (`numpy.zeros(<shape>)` would produce an \
array with the correct shape)

------------------
XXXX MOVED FROM ABOVE:
Note that the value of a parameter may be a long-form dictionary when it corresponds to a **port**.
In this case, it will indicate the **port** in a `source` field:


    "intercept": {
        "source": "A.input_ports.intercept",
        "type": "float",
        "value": 2.0
    }
-----------------


**Graphs** have:

* ``nodes`` : a dictionary of Mechanisms or Compositions keyed on \
their names that are part of the Composition

* ``edges`` : a dictionary of Projections keyed on their names that \
connect nodes of the Composition

0XXX ??IS THIS GENERAL, OR SPECIFIC TO PNL:
* ``controller`` : the name of the **node** in the **graph**'s node list that serves as the graph's controller, if it exists

